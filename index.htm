<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Login | SIM Database</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
  <style>
    body { background-color: #f8f9fa; font-family: 'Segoe UI', sans-serif; }
    .centered { max-width: 400px; margin: 80px auto; padding: 30px; background: #fff; border-radius: 12px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }
    .hidden { display: none !important; }
    #responseBox .record-card {
      background: #fff; padding: 15px; margin-bottom: 10px;
      border-radius: 8px; box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    }
    .sidebar {
      height: 100vh;
      background: #343a40;
      color: white;
      padding: 1rem;
      position: fixed;
      left: 0;
      top: 0;
      width: 200px;
      display: none;
      z-index: 1050;
    }
    .sidebar a {
      color: white;
      text-decoration: none;
      display: block;
      margin: 1rem 0;
    }
    .main-content { margin-left: 0; transition: margin-left 0.3s ease; }
    .main-content.shifted { margin-left: 200px; }

    /* Admin panel styles */
    #adminPanel {
      background: #e9ecef;
      padding: 15px;
      margin-top: 20px;
      border-radius: 8px;
      max-height: 400px;
      overflow-y: auto;
    }
    #adminPanel h4 {
      margin-bottom: 15px;
    }
    #adminPanel table {
      width: 100%;
    }
    #adminPanel table th, #adminPanel table td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #ccc;
    }
    #userStats {
      margin-bottom: 15px;
      font-weight: bold;
    }
  </style>
</head>
<body>

<div id="loginContainer" class="centered">
  <h3 class="text-center mb-4">🔐 Login to SIM Database</h3>
  <input type="text" id="username" class="form-control mb-2" placeholder="Username" />
  <input type="password" id="password" class="form-control mb-3" placeholder="Password" />
  <button class="btn btn-primary w-100 mb-2" onclick="login()">Login</button>
  <button class="btn btn-secondary w-100" onclick="register()">Register</button>
</div>

<div class="sidebar" id="sidebar">
  <h4>📁 Menu</h4>
  <a href="#" onclick="document.getElementById('num').focus()">🔍 Search</a>
  <a href="https://wa.me/+923154376814" target="_blank">📞 WhatsApp</a>
  <a href="#" onclick="logout()">🚪 Logout</a>
</div>

<div id="mainApp" class="container main-content hidden">
  <button class="btn btn-outline-dark mt-3 mb-2" onclick="toggleSidebar()">☰ Menu</button>
  <h1 class="text-center my-3 text-primary">📱 Yasir SIM DATABASE</h1>
  <div class="mb-3">
    <input type="text" id="num" class="form-control text-center" placeholder="Enter Number or CNIC" />
  </div>
  <div class="d-grid gap-2">
    <button id="fetchData" class="btn btn-success">Search</button>
  </div>
  <div id="responseBox" class="mt-4 mb-4"></div>
  <div class="text-center mb-4">
    <button id="logoutBtn" class="btn btn-danger" onclick="logout()">Logout</button>
  </div>

  <!-- Admin Panel (hidden for non-admins) -->
  <div id="adminPanel" class="hidden">
    <h4>👑 Admin Panel</h4>
    <div id="userStats">Loading user stats...</div>
    <table>
      <thead>
        <tr>
          <th>Username</th>
          <th>Role</th>
          <th>Approved</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="userList">
        <!-- Users list inserted here -->
      </tbody>
    </table>
  </div>
</div>

<script>
const githubToken = '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';
const repoOwner = 'yasirtanveer7869';
const repoName = 'sim-bot';
const filePath = 'login.json';

function toggleSidebar() {
  const sidebar = document.getElementById("sidebar");
  const main = document.getElementById("mainApp");
  if (sidebar.style.display === "block") {
    sidebar.style.display = "none";
    main.classList.remove("shifted");
  } else {
    sidebar.style.display = "block";
    main.classList.add("shifted");
  }
}

async function fetchLoginData() {
  const res = await fetch(`https://api.github.com/repos/${repoOwner}/${repoName}/contents/${filePath}`, {
    headers: { Authorization: `token ${githubToken}` }
  });
  const data = await res.json();
  const content = atob(data.content);
  return { users: JSON.parse(content), sha: data.sha };
}

async function updateLoginData(users, sha) {
  const updated = btoa(JSON.stringify(users, null, 2));
  await fetch(`https://api.github.com/repos/${repoOwner}/${repoName}/contents/${filePath}`, {
    method: 'PUT',
    headers: {
      Authorization: `token ${githubToken}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      message: "Update login.json",
      content: updated,
      sha
    })
  });
}

async function login() {
  const uname = document.getElementById("username").value.trim();
  const pass = document.getElementById("password").value.trim();
  const { users } = await fetchLoginData();

  // Find user who matches username & password and is approved
  const user = users.find(u => u.username === uname && u.password === pass && u.approved);

  if (user) {
    document.getElementById("loginContainer").classList.add("hidden");
    document.getElementById("mainApp").classList.remove("hidden");

    // Show admin panel only for admins
    if (user.role === 'admin') {
      document.getElementById("adminPanel").classList.remove("hidden");
      loadAdminPanel(users);
    } else {
      document.getElementById("adminPanel").classList.add("hidden");
    }

  } else {
    alert("❌ Invalid credentials or not approved by admin.");
  }
}

async function register() {
  const uname = document.getElementById("username").value.trim();
  const pass = document.getElementById("password").value.trim();
  if (!uname || !pass) return alert("Enter username and password");

  const { users, sha } = await fetchLoginData();
  if (users.find(u => u.username === uname)) return alert("⚠️ Username exists");

  users.push({ username: uname, password: pass, approved: false, role: "user" });
  await updateLoginData(users, sha);
  alert("✅ Registered! Please wait for admin approval.");
}

function logout() {
  document.getElementById("mainApp").classList.add("hidden");
  document.getElementById("loginContainer").classList.remove("hidden");
  document.getElementById("sidebar").style.display = "none";
  document.getElementById("mainApp").classList.remove("shifted");
  document.getElementById("adminPanel").classList.add("hidden");
}

// Admin panel related functions
function loadAdminPanel(users) {
  updateUserStats(users);
  renderUserList(users);
}

function updateUserStats(users) {
  const total = users.length;
  const approved = users.filter(u => u.approved).length;
  const admins = users.filter(u => u.role === 'admin').length;
  document.getElementById("userStats").textContent =
    `Total Users: ${total} | Approved: ${approved} | Admins: ${admins}`;
}

async function toggleUserApproval(username) {
  const { users, sha } = await fetchLoginData();
  const user = users.find(u => u.username === username);
  if (user) {
    user.approved = !user.approved;
    await updateLoginData(users, sha);
    loadAdminPanel(users);
  }
}

async function toggleUserRole(username) {
  const { users, sha } = await fetchLoginData();
  const user = users.find(u => u.username === username);
  if (user) {
    user.role = (user.role === 'admin') ? 'user' : 'admin';
    await updateLoginData(users, sha);
    loadAdminPanel(users);
  }
}

async function deleteUser(username) {
  if (!confirm(`Delete user "${username}"? This action cannot be undone.`)) return;
  const { users, sha } = await fetchLoginData();
  const filtered = users.filter(u => u.username !== username);
  await updateLoginData(filtered, sha);
  loadAdminPanel(filtered);
}

function renderUserList(users) {
  const tbody = document.getElementById("userList");
  tbody.innerHTML = '';
  users.forEach(u => {
    const tr = document.createElement('tr');

    const nameTd = document.createElement('td');
    nameTd.textContent = u.username;
    tr.appendChild(nameTd);

    const roleTd = document.createElement('td');
    roleTd.textContent = u.role;
    tr.appendChild(roleTd);

    const approvedTd = document.createElement('td');
    approvedTd.textContent = u.approved ? "Yes" : "No";
    tr.appendChild(approvedTd);

    const actionsTd = document.createElement('td');

    const approveBtn = document.createElement('button');
    approveBtn.textContent = u.approved ? "Disapprove" : "Approve";
    approveBtn.className = 'btn btn-sm btn-outline-primary me-1';
    approveBtn.onclick = () => toggleUserApproval(u.username);
    actionsTd.appendChild(approveBtn);

    const roleBtn = document.createElement('button');
    roleBtn.textContent = (u.role === 'admin') ? "Make User" : "Make Admin";
    roleBtn.className = 'btn btn-sm btn-outline-warning me-1';
    roleBtn.onclick = () => toggleUserRole(u.username);
    actionsTd.appendChild(roleBtn);

    const delBtn = document.createElement('button');
    delBtn.textContent = "Delete";
    delBtn.className = 'btn btn-sm btn-outline-danger';
    delBtn.onclick = () => deleteUser(u.username);
    actionsTd.appendChild(delBtn);

    tr.appendChild(actionsTd);

    tbody.appendChild(tr);
  });
}

function shareRecord(button) {
  const card = button.closest('.record-card');
  html2canvas(card).then(canvas => {
    const link = document.createElement('a');
    link.download = 'sim_record.png';
    link.href = canvas.toDataURL();
    link.click();
  });
}

document.getElementById("fetchData").addEventListener("click", async () => {
  const input = document.getElementById("num");
  const num = input.value.trim();
  const box = document.getElementById("responseBox");
  box.innerHTML = "<div class='text-center text-muted'>Loading...</div>";
  input.value = ""; // clear the field

  const url = `https://api.allorigins.win/get?url=${encodeURIComponent(`https://freshsimdetails.com/wp-json/sim-search/v1/fetch-data?number=${num}`)}`;
  try {
    const res = await fetch(url);
    const json = await res.json();
    const apiData = JSON.parse(json.contents);
    if (!apiData.name || !apiData.cnic) return box.innerHTML = "❌ No data found.";

    let html = "";
    if (Array.isArray(apiData.numbers) && apiData.numbers.length > 0) {
      apiData.numbers.forEach(rec => {
        let mobile = typeof rec === 'string' ? rec : rec.mobile || "N/A";
        let operator = rec.operator || apiData.operator || "N/A";
        let address = rec.address || apiData.address || "N/A";
        html += `
          <div class="record-card">
            <strong>📞 Mobile:</strong> ${mobile}<br>
            <strong>👤 Name:</strong> ${apiData.name}<br>
            <strong>🆔 CNIC:</strong> ${apiData.cnic}<br>
            <strong>🏠 Address:</strong> ${address}<br>
            <strong>📡 Operator:</strong> ${operator}<br>
            <button class="btn btn-outline-primary btn-sm mt-2" onclick="shareRecord(this)">📤 Share</button>
          </div>`;
      });
    } else {
      html = `
        <div class="record-card">
          <strong>👤 Name:</strong> ${apiData.name}<br>
          <strong>🆔 CNIC:</strong> ${apiData.cnic}<br>
          <strong>📞 Mobile:</strong> ${apiData.number || "N/A"}<br>
          <strong>🏠 Address:</strong> ${apiData.address || "N/A"}<br>
          <strong>📡 Operator:</strong> ${apiData.operator || "N/A"}<br>
          <button class="btn btn-outline-primary btn-sm mt-2" onclick="shareRecord(this)">📤 Share</button>
        </div>`;
    }
    box.innerHTML = html;
  } catch (e) {
    box.innerHTML = `<div class="text-danger">API Error: ${e.message}</div>`;
  }
});
</script>

</body>
</html>
